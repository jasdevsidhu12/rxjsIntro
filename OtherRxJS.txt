//-------------------------------------------------------------
// into es6
import { Observable } from 'rxjs';

let number = [1, 2, 3];
let source = Observable.from(number);
class MyObserver {
  next(value) {
    console.log(value);
  }
  error(error) {
    console.log(`error: ${error}`);
  }
  complete() {
    console.log('complete');
  }
}
source.subscribe(new MyObserver());

// class MyObserver implements Observer<number>


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import { Observable, Observer } from 'rxjs';

let numbers = [1, 2, 3];
let source = Observable.create((observer) => {
  console.log(observer);
  for(let n of numbers) {
    observer.next(n);
  }
  observer.complete();
});
source.subscribe(
  value => console.log(`value : ${value}`),
  error => console.log(`error: ${error}`),
  () => console.log('complete')
);
// ----------------------------------------------------
// Observable.create().map(n => n*2).filter(n => n > 2);
// reduce import libraries
// import { Observable } from 'rxjs/Observable';
// import 'rxjs/add/operator/map';
// import 'rxjs/add/operator/filter';
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// use mouse event
import { Observable } from 'rxjs';
let numbers = [1, 2, 3];
let source = Observable.fromEvent(document, "mousemove");

source.subscribe(
  value => console.log(value),
  error => console.log(`error: ${error}`),
  () => console.log('complete')
);
// ------------------------------------------------------------
// Observable.fromEvent().map((e: MouseEvent) => {
  return { x: e.clientX, y: e.clientY };
}).filter(value => value.x < 500);


//++++++++++++++++++++++++++++++++++++++++++++++++++++
// circle dot animation
// **make sure** .circle diplay:block

import { Observable } from 'rxjs';

let circle: any;
circle = document.getElementsByClassName('circle')[0];
let source = Observable.fromEvent(document, "mousemove").map((e: MouseEvent) => {
  return { x: e.clientX, y: e.clientY };
}).filter(value => value.x < 500).delay(200);

function onNext(value) {
  circle.style.left = value.x;
  circle.style.top = value.y;
}
source.subscribe(
  onNext,
  error => console.log(`error: ${error}`),
  () => console.log('complete')
);

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



import { Observable } from 'rxjs';

let circle: any;
let button: any;
let output: any;
output = document.getElementById('output');
circle = document.getElementsByClassName('circle')[0];
button = document.getElementById('button');
let click = Observable.fromEvent(button, 'click');

function loadData(url: string){
  return Observable.create(observer => {
    let xhr = new XMLHttpRequest();
    xhr.open("GET", url);
    xhr.addEventListener("load", ()=>{
      let data = JSON.parse(xhr.responseText);
      observer.next(data);
      observer.complete();
    });
    xhr.send();
  });
}

function renderMovie(movies) {
  movies.forEach(m => {
    let div = document.createElement("div");
    div.innerText = m.title;
    output.appendChild(div);
  });
}

// click.map(e => loadData("movies.json")).subscribe(o => console.log(o));


click.flatMap(e => loadData("movies.json")).subscribe(o => console.log(o));
// lazy loading
// loadData("movies.json").subscribe(renderMovie);
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// fetch

import { Observable } from 'rxjs';

function loadWithFetchUrl(url: string) {
  return Observable.defer(() => {
    return Observable.fromPromise(
      fetch(url).then(r => {
        if (r.status === 200) {
          return r.json();
        }
      })
    )});
}
loadWithFetchUrl("movies.json").subscribe(r => console.log(r),e => console.log(`Error : ${e}`), ()=>{ console.log('complete');});

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import { Observable } from 'rxjs';

function retryStrategy() {
  return (erros) => {
    return erros.scan((acc, value) => {
      console.log(acc, value);
      acc+=1;
      if (acc < 4) {
        return acc;
      } else {
        throw new Error(value);
      }
    }, 0).delay(1000);
  };
}

function loadWithFetchUrl(url: string) {
  return Observable.defer(() => {
    return Observable.fromPromise(
      fetch(url).then(r => {
        if (r.status === 200) {
          return r.json();
        } else {
          return Promise.reject(r);
        }
      })
    )}).retryWhen(retryStrategy());
}
loadWithFetchUrl("mosvies.json").subscribe(r => console.log(r),e => console.log(`Error : ${e}`), ()=>{ console.log('complete');});


